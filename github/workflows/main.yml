name: vprofile actions
on: workflow_dispatch
env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY:  vprofileapp
  EKS_CLUSTER: vprofile-eks

jobs:
  Testing:
    runs-on: ubuntu-latest
    steps:
      - name: Code Checkout 
        uses: actions/checkout@v4

      - name: Maven Test 
        run: mvn test 
      - name: CheckStyle
        run: mvn checkstyle:checkstyle

      #Setup java 11 to be default (sonar-scanner requirement as of 5.x)
      - name: Set Java 11 
        uses: actions/setup-java@v3 
        with:
          distribution: 'temurin' # See 'supported distribution' for available versions
          java_version: '11'

      # Setup the Sonar Scanner CLI
      - name: Setup SonarQube 
        uses: warchant/setup-sonar-scanner@v7 

      # Run Sonar Scanner
      - name: SonarQube Scan 
        run: sonar-scanner 
          -Dsonar.host.url=${{ secrets.SONAR_URL }}
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}
          -Dsonar.organization=${{ secret.SONAR_ORGANIZATION }}
          -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
          -Dsonar.sources=src/
          -Dsonar.junit.reportsPath=target/sunfire-reports/
          -Dsonar.jacoco.reportsPath=terget/jacoco.exec 
          -Dsonar.java.checkstyle.reportsPaths=target/checkstyle-result.xml
          -Dsonar.java.binaries=target/test-classes/com/visualpathit/account

      # Check the Quality Gate status.
      - name: SonarQube Quality Gate Check 
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        #Force to fail after specific time
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_URL }}
  BUILD_AND_PUBLISH:
  needs: Testing 
  runs-on: ubuntu-latest
  steps: 
    - name: Code Checkout 
      uses: actions/checkout@v4 
    - name: Build & Upload the image to ECR 
      uses: appleboy/docker-ecr-actions@master 
      with:
        access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        registry: ${{ secrets.REGISTRY }}
        repo: ${{ env.ECR_REPOSITORY }}
        region: ${{ env.AWS_REGION }}
        tags: latest,${{ github.run_number }}
        daemon_off: false 
        docekrfile: ./Dockerfile
        context: ./
